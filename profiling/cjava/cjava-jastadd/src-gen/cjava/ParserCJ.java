package cjava;

import java.util.ArrayList;
import beaver.*;
import cjava.ast.*;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "ParserCJ.beaver".
 */
public class ParserCJ extends Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short RBRACE = 1;
		static public final short LSQUARE = 2;
		static public final short PUBLIC = 3;
		static public final short IDENTIFIER = 4;
		static public final short INT = 5;
		static public final short SEMICOLON = 6;
		static public final short RPAREN = 7;
		static public final short POINT = 8;
		static public final short COMMA = 9;
		static public final short LBRACE = 10;
		static public final short EQUAL = 11;
		static public final short RSQUARE = 12;
		static public final short CLASS = 13;
		static public final short VOID = 14;
		static public final short LPAREN = 15;
		static public final short STATIC = 16;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9oDaqbl4q4GHZ$7MpBEPXF7Zkq0YPEm10XR086u850kB5Aum0K90H8N92Ga82nI3kmINFc" +
		"944Zii8GTYjSzdcXi0SAVNbTDTNLvkhf7qakDQ9EcL5MNXYFVNcdQVeNoiJBpBMi$GsbMkn" +
		"NeW59AQaPPTRjd##waKVNRDozJMhta36gN#kohrnSdJMg3IfeW5spDgw6ShLW3hQ1bPTHZo" +
		"zWPUujUEpHWItXBogk0zy6hgQ9sMXFhwkrGHJLVzQFNUw$FNf#yVZYHEQHjsc9lDAvnMzLc" +
		"MxLtsWWJ6bDTMydOhZtQAscVt6#$#rVUUuWz3w$xDNmfGGUJwx78Hl5mBAgFFPVfPJoQ9Zl" +
		"qHATAvFGJgRRb9DXJWjcq9ueDjiK2wZklJD#ohdUSIGRbi2aDOADrGTiwbnEl#kSnJSqiDJ" +
		"DKwyRBuMTPrmC5o9CHa9dYp7lDtCX#3Yxwnb53z4FS574#qd6eGXrStfJBXKcOXbcOXqDm3" +
		"ax3RRW5v#4878LZS08kmnnSWPFm04x17NW4T#49d86pS04kmbEu3m$X4bo5Qt0TtAlVW1Vm" +
		"71x3CxW9PLXm2MoqWGaMMmjQ#mtWS4Ui4d$kcAj7FlMQhdj$o#rOj$2FkNkncckOvF$KZAs" +
		"NtsUDCornjYNEsDtR4PwB$Yud$Nqh4YipN#LMLBaH8Hb$Nol#Eqb05wSVaWVt$HI85x2Zlm" +
		"6$zDQz");
 public String source = null;

	private final Action[] actions;

	public ParserCJ() {
		super(PARSING_TABLES);
		actions = new Action[] {
			new Action() {	// [0] compilation_unit = PUBLIC class_declaration.decl
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_decl = _symbols[offset + 2];
					final ClassDeclaration decl = (ClassDeclaration) _symbol_decl.value;
					 return _symbol_decl;
				}
			},
			new Action() {	// [1] class_declaration = CLASS IDENTIFIER.id LBRACE declaration_list.decls RBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_id = _symbols[offset + 2];
					final String id = (String) _symbol_id.value;
					final Symbol _symbol_decls = _symbols[offset + 4];
					final List<Declaration> decls = (List<Declaration>) _symbol_decls.value;
					 return new Symbol(new ClassDeclaration(id, decls, source));
				}
			},
			new Action() {	// [2] class_declaration = CLASS IDENTIFIER.id LBRACE RBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_id = _symbols[offset + 2];
					final String id = (String) _symbol_id.value;
					 return new Symbol(new ClassDeclaration(id, new List<Declaration>(), source));
				}
			},
			new Action() {	// [3] declaration_list = declaration.decl
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_decl = _symbols[offset + 1];
					final Declaration decl = (Declaration) _symbol_decl.value;
					 return new Symbol(new List<Declaration>().add(decl));
				}
			},
			new Action() {	// [4] declaration_list = declaration_list.list declaration.decl
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final List<Declaration> list = (List<Declaration>) _symbol_list.value;
					final Symbol _symbol_decl = _symbols[offset + 2];
					final Declaration decl = (Declaration) _symbol_decl.value;
					 list.add(decl); return _symbol_list;
				}
			},
			new Action() {	// [5] declaration = PUBLIC STATIC class_declaration.decl
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_decl = _symbols[offset + 3];
					final ClassDeclaration decl = (ClassDeclaration) _symbol_decl.value;
					 return _symbol_decl;
				}
			},
			new Action() {	// [6] declaration = PUBLIC STATIC method_declaration.decl
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_decl = _symbols[offset + 3];
					final MethodDeclaration decl = (MethodDeclaration) _symbol_decl.value;
					 return _symbol_decl;
				}
			},
			new Action() {	// [7] declaration = PUBLIC STATIC field_declaration.decl SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_decl = _symbols[offset + 3];
					final FieldDeclaration decl = (FieldDeclaration) _symbol_decl.value;
					 return _symbol_decl;
				}
			},
			new Action() {	// [8] declaration = hook_declaration.decl
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_decl = _symbols[offset + 1];
					final DeclarationHook decl = (DeclarationHook) _symbol_decl.value;
					 return _symbol_decl;
				}
			},
			new Action() {	// [9] hook_declaration = LSQUARE LSQUARE IDENTIFIER.id RSQUARE RSQUARE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_id = _symbols[offset + 3];
					final String id = (String) _symbol_id.value;
					 return new Symbol(new DeclarationHook(id));
				}
			},
			new Action() {	// [10] method_declaration = VOID IDENTIFIER.id LPAREN param_list.params RPAREN LBRACE field_or_assignment_list.body RBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_id = _symbols[offset + 2];
					final String id = (String) _symbol_id.value;
					final Symbol _symbol_params = _symbols[offset + 4];
					final List<FieldDeclaration> params = (List<FieldDeclaration>) _symbol_params.value;
					final Symbol _symbol_body = _symbols[offset + 7];
					final List<Statement> body = (List<Statement>) _symbol_body.value;
					 return new Symbol(new MethodDeclaration(id, params, body));
				}
			},
			new Action() {	// [11] method_declaration = VOID IDENTIFIER.id LPAREN RPAREN LBRACE field_or_assignment_list.body RBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_id = _symbols[offset + 2];
					final String id = (String) _symbol_id.value;
					final Symbol _symbol_body = _symbols[offset + 6];
					final List<Statement> body = (List<Statement>) _symbol_body.value;
					 return new Symbol(new MethodDeclaration(id, new List<FieldDeclaration>(), body));
				}
			},
			new Action() {	// [12] method_declaration = VOID IDENTIFIER.id LPAREN param_list.params RPAREN LBRACE RBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_id = _symbols[offset + 2];
					final String id = (String) _symbol_id.value;
					final Symbol _symbol_params = _symbols[offset + 4];
					final List<FieldDeclaration> params = (List<FieldDeclaration>) _symbol_params.value;
					 return new Symbol(new MethodDeclaration(id, params, new List<Statement>()));
				}
			},
			new Action() {	// [13] method_declaration = VOID IDENTIFIER.id LPAREN RPAREN LBRACE RBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_id = _symbols[offset + 2];
					final String id = (String) _symbol_id.value;
					 return new Symbol(new MethodDeclaration(id, new List<FieldDeclaration>(), new List<Statement>()));
				}
			},
			new Action() {	// [14] param_list = field_declaration.decl
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_decl = _symbols[offset + 1];
					final FieldDeclaration decl = (FieldDeclaration) _symbol_decl.value;
					 return new Symbol(new List<FieldDeclaration>().add(decl));
				}
			},
			new Action() {	// [15] param_list = param_list.list COMMA field_declaration.decl
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final List<FieldDeclaration> list = (List<FieldDeclaration>) _symbol_list.value;
					final Symbol _symbol_decl = _symbols[offset + 3];
					final FieldDeclaration decl = (FieldDeclaration) _symbol_decl.value;
					 list.add(decl); return _symbol_list;
				}
			},
			new Action() {	// [16] field_or_assignment_list = field_or_assignment.stmt
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_stmt = _symbols[offset + 1];
					final Statement stmt = (Statement) _symbol_stmt.value;
					 return new Symbol(new List<Statement>().add(stmt));
				}
			},
			new Action() {	// [17] field_or_assignment_list = field_or_assignment_list.list field_or_assignment.stmt
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final List<Statement> list = (List<Statement>) _symbol_list.value;
					final Symbol _symbol_stmt = _symbols[offset + 2];
					final Statement stmt = (Statement) _symbol_stmt.value;
					 list.add(stmt); return _symbol_list;
				}
			},
			new Action() {	// [18] field_or_assignment = field_declaration.decl SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_decl = _symbols[offset + 1];
					final FieldDeclaration decl = (FieldDeclaration) _symbol_decl.value;
					 return _symbol_decl;
				}
			},
			new Action() {	// [19] field_or_assignment = assignment.stmt SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_stmt = _symbols[offset + 1];
					final VariableAssignment stmt = (VariableAssignment) _symbol_stmt.value;
					 return _symbol_stmt;
				}
			},
			new Action() {	// [20] field_declaration = INT IDENTIFIER.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_id = _symbols[offset + 2];
					final String id = (String) _symbol_id.value;
					 return new Symbol(new FieldDeclaration(id));
				}
			},
			new Action() {	// [21] assignment = qualified_name.lhand EQUAL qualified_name.rhand
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_lhand = _symbols[offset + 1];
					final String lhand = (String) _symbol_lhand.value;
					final Symbol _symbol_rhand = _symbols[offset + 3];
					final String rhand = (String) _symbol_rhand.value;
					 return new Symbol(new VariableAssignment(new Reference(lhand), new Reference(rhand)));
				}
			},
			new Action() {	// [22] qualified_name = IDENTIFIER.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_id = _symbols[offset + 1];
					final String id = (String) _symbol_id.value;
					 return new Symbol(id);
				}
			},
			new Action() {	// [23] qualified_name = qualified_name.id1 POINT IDENTIFIER.id2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_id1 = _symbols[offset + 1];
					final String id1 = (String) _symbol_id1.value;
					final Symbol _symbol_id2 = _symbols[offset + 3];
					final String id2 = (String) _symbol_id2.value;
					 return new Symbol(id1 + "." + id2);
				}
			}
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
