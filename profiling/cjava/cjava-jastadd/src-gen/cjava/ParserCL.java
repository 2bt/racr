package cjava;

import java.util.ArrayList;
import beaver.*;
import cjava.ast.*;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "ParserCL.beaver".
 */
public class ParserCL extends Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short BIND = 1;
		static public final short IDENTIFIER = 2;
		static public final short SEMICOLON = 3;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9njZKiEW308H5zhrVfRU6FlhNQSgXiJ8IyCP01W9HErIoITpiDPL4Wqj7H0R$sey25u7hq" +
		"hEs7Ok6CqjM$DP6Qpt5TUZwJ39LVznnl97uElLAAxH7y1XB4QhG==");

	private final Action[] actions;

	public ParserCL() {
		super(PARSING_TABLES);
		actions = new Action[] {
			new Action() {	// [0] composition_program = composer_list.list
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final List<BindComposer> list = (List<BindComposer>) _symbol_list.value;
					 return new Symbol(new CompositionProgram(list));
				}
			},
			new Action() {	// [1] composer_list = composer.comp
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_comp = _symbols[offset + 1];
					final BindComposer comp = (BindComposer) _symbol_comp.value;
					 return new Symbol(new List<BindComposer>().add(comp));
				}
			},
			new Action() {	// [2] composer_list = composer_list.list composer.comp
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_list = _symbols[offset + 1];
					final List<BindComposer> list = (List<BindComposer>) _symbol_list.value;
					final Symbol _symbol_comp = _symbols[offset + 2];
					final BindComposer comp = (BindComposer) _symbol_comp.value;
					 list.add(comp); return _symbol_list;
				}
			},
			new Action() {	// [3] composer = BIND IDENTIFIER.target IDENTIFIER.source SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_target = _symbols[offset + 2];
					final String target = (String) _symbol_target.value;
					final Symbol _symbol_source = _symbols[offset + 3];
					final String source = (String) _symbol_source.value;
					 return new Symbol(new BindComposer (target, source));
				}
			}
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
